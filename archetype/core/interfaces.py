from typing import Protocol, List, Type, Tuple, Dict, Optional, Union
from daft import DataFrame
from lancedb.pydantic import LanceModel
from lancedb.table import DATA

class Component(LanceModel):
    pass

class iProcessor(Protocol):
    priority: int
    components: Tuple[Type[Component], ...]
    def process(self, df: DataFrame) -> DataFrame | None: ...

class iSystem(Protocol):
    def add_processor(self, processor: iProcessor) -> None: ...
    def remove_processor(self, processor: iProcessor) -> None: ...
    def execute(self, step: int, dt: float) -> Dict[iProcessor, DataFrame]: ...

class iStore(Protocol):
    def add_entity(self, components: List[Component], step: int) -> int: ...
    def remove_entity(self, entity_id: int, step: int) -> None: ...
    def remove_component_from_entity(self, entity_id: int, component_type: Type[Component]) -> None: ...
    def get_archetypes(self, *component_types: Type[Component]) -> Dict[str, DataFrame]: ...
    def upsert(self, sig: Tuple[Component, ...], data: DATA): ...
    def update(self, sig: Tuple[Component, ...], data: DATA): ...

class iQuerier(Protocol):
    def query(self, *component_types: Type[Component], step: int, entities: Optional[Union[int, List[int]]] = None) -> DataFrame: ...

class iUpdater(Protocol):
    def update(self, archetypes: Dict[str, DataFrame]): ...

class iWorld(Protocol):
    def __init__(self, store: iStore, querier: iQuerier, updater: iUpdater, system: iSystem): ...
    def step(self, dt: float): ...
    def spawn(self, components: List[Component], step: Optional[int] = None) -> int: ...
    def despawn(self, entity_id: int, step: Optional[int] = None) -> None: ...
    def remove(self, entity_id: int, comp_type: Type[Component]) -> None: ...

